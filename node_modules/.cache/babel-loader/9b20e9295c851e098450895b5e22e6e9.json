{"ast":null,"code":"import { db } from '../../../firebase/firebaseConfig';\n\nconst getCooks = async () => {\n  const snapshot = await db.collection(\"Cooks\").get();\n  const data = await snapshot.docs.map(doc => {\n    return { ...doc.data(),\n      id: doc.id\n    };\n  });\n  console.log(data);\n  return data;\n};\n\nconst getUsers = async () => {\n  const snapshot = await db.collection(\"Users\").get();\n  const data = await snapshot.docs.map(doc => {\n    return { ...doc.data(),\n      id: doc.id\n    };\n  });\n  console.log(data);\n  return data;\n};\n\nconst getCook = async id => {\n  const snapshot = await db.collection(\"Cooks\").doc(`${id}`).get();\n  console.log(snapshot.data());\n  const data = await snapshot.data();\n\n  if (data) {\n    // data will never be undefined here, because we just checked that.\n    const foo = data.foo;\n  }\n\n  if (data !== undefined) return data;\n};\n\nconst getOrders = async id => {\n  try {\n    const snapshot = await db.collection(\"Users\").doc(`${id}`).collection(\"orders\").get();\n    const sre = await snapshot.docs.map(async doc => {\n      const data = await doc.data();\n      const cookdetails = await getCook(data.cookId);\n      return { ...data,\n        name: cookdetails.Name,\n        id: data.id\n      };\n    });\n    return sre;\n  } catch (err) {\n    return null;\n  }\n};\n\nconst verifyOrder = (id, orderId, result) => {\n  try {\n    const snapshot = db.collection(\"Users\").doc(`${id}`).collection(\"orders\").doc(`${orderId}`);\n    snapshot.get().then(doc => snapshot.set({ ...doc,\n      verified: result\n    }));\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst deleteOrder = (id, orderId) => {\n  db.collection(\"Users\").doc(`${id}`).collection(\"orders\").doc(`${orderId}`).delete().then(() => console.log(\"deleted\"));\n};\n\nconst verifyUsers = async (username, password) => {\n  const data = await db.collection(\"admins\").doc(`${username}`).get();\n  const credentials = await data.data();\n  if (credentials.email == username && credentials.password == password) return true;else return false;\n};\n\nconst getMenu = async id => {\n  const snapshot = await db.collection(\"Cooks\").doc(`${id}`).collection(\"Menu\").get();\n  const data = await snapshot.docs.map(doc => doc.data());\n  return data;\n};\n\nconst addCook = cookData => db.collection(\"Cooks\").doc().set(cookData);\n\nexport { getCooks, getUsers, getOrders, verifyOrder, deleteOrder, verifyUsers, addCook, getMenu };","map":{"version":3,"sources":["/home/suhan/Foodey/foodey-testing/src/pages/admin/utils/index.ts"],"names":["db","getCooks","snapshot","collection","get","data","docs","map","doc","id","console","log","getUsers","getCook","foo","undefined","getOrders","sre","cookdetails","cookId","name","Name","err","verifyOrder","orderId","result","then","set","verified","deleteOrder","delete","verifyUsers","username","password","credentials","email","getMenu","addCook","cookData"],"mappings":"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","sourcesContent":["import {db} from '../../../firebase/firebaseConfig';\n\n\nconst getCooks = async ()=>{\n    const snapshot = await db.collection (\"Cooks\").get ();\n    const data = await snapshot.docs.map(doc=>{\n    return { ...doc.data(),\n                id: doc.id\n        }\n    });\n    console.log(data)\n    return data;\n}\n\nconst getUsers = async ()=>{\n    const snapshot = await db.collection (\"Users\"). get ();\n    const data = await snapshot.docs.map (doc=>{\n        return {\n            ...doc.data (),\n            id: doc.id\n        }\n    });\n    console.log (data);\n    return data;\n}\n\nconst getCook = async (id:string)=>{\n    const snapshot = await db.collection (\"Cooks\").doc(`${id}`).get();\n    console.log (snapshot.data())\n    const data = await snapshot.data();\n    if (data) {\n        // data will never be undefined here, because we just checked that.\n        const foo = data.foo\n    }\n    if (data!==undefined)\n        return data;\n}\n\nconst getOrders = async (id:string)=>{\n  try {  \n    const snapshot = await db.collection (\"Users\").doc (`${id}`).collection (\"orders\").get ();\n    const sre = await snapshot.docs.map (async doc=>{\n        const data = await doc.data ();\n        const cookdetails:any = await getCook (data.cookId);\n        return {\n            ...data, \n            name: cookdetails.Name,\n            id: data.id\n        }\n    }\n\n        );\n        return sre;\n} catch (err) {\n    return null;\n}\n}\n\nconst verifyOrder = (id:string, orderId:string, result:boolean) => {\ntry {\n    const snapshot = db.collection (\"Users\").doc (`${id}`).collection (\"orders\").doc (`${orderId}`);\n    snapshot.get ().then (doc=>snapshot.set ({\n        ...doc,\n        verified: result\n    }));\n} catch (err) {\n    console.log (err);\n}\n    \n}\n\nconst deleteOrder = (id:string, orderId:string) => {\n    db.collection (\"Users\").doc (`${id}`).collection (\"orders\").doc (`${orderId}`).delete ().then (()=>console.log (\"deleted\"));\n}\n\nconst verifyUsers = async (username:string, password:string) => {\n\n   const data = await db.collection (\"admins\").doc (`${username}`).get ();\n   const credentials:any = await data.data ();\n\n   if (credentials.email == username && credentials.password == password)\n    return true;\n    else return false;\n\n}\n\nconst getMenu = async (id:string)=>{\n    const snapshot = await db.collection (\"Cooks\").doc (`${id}`).collection (\"Menu\").get ();\n    const data = await snapshot.docs.map (doc=>doc.data ()) ;\n    return data;\n\n}\n\nconst addCook = (cookData:any) => db.collection (\"Cooks\").doc ().set (cookData);\n\n\n\nexport {getCooks, getUsers, getOrders, verifyOrder, deleteOrder, verifyUsers, addCook, getMenu};"]},"metadata":{},"sourceType":"module"}