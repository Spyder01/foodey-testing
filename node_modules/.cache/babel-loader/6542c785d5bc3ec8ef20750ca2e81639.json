{"ast":null,"code":"import { db, firebase } from './firebaseConfig';\n\nconst isUserExists = async phoneNo => {\n  const doc = await db.collection(\"customers\").doc(phoneNo.toString()).get();\n  return doc.exists;\n};\n\nconst getUser = async phoneNo => {\n  const doc = await db.collection(\"customers\").doc(phoneNo.toString()).get();\n  console.table(doc.data());\n  return doc.data();\n};\n\nconst getOrders = async (setOrders, phoneNo) => {\n  const snapshot = await db.collection(\"customers\").doc(phoneNo).collection(\"orders\").get(); // console.table (snapshot.docs.map(doc=>doc.data()))\n\n  return snapshot.docs.map(doc => doc.data());\n};\n\nconst addUser = data => {\n  db.collection(\"customers\").doc(data.phoneNo.toString()).set(data).then(res => console.log(\"Added\"));\n};\n\nconst addOrder = async (phoneNo, order) => {\n  const today = new Date();\n  const date = `${today.getDate()}-${today.getMonth()}-${today.getFullYear()}`;\n  const id = order.cookID;\n  const cook = await getCook(id); //   console.log(cook.Name)\n\n  const newData = { ...order,\n    //     Name: cook.Name,\n    date: date\n  };\n  db.collection(\"customers\").doc(phoneNo).collection(\"orders\").add(newData).then(docRef => {\n    console.log(\"Document written with ID: \", docRef.id);\n  }).catch(error => {\n    console.error(\"Error adding document: \", error);\n  });\n};\n\nconst getCooks = async () => {\n  const snapshot = await db.collection(\"Cooks\").get();\n  const data = await snapshot.docs.map(doc => {\n    return { ...doc.data(),\n      id: doc.id\n    };\n  });\n  console.log(data);\n  return data;\n};\n\nconst getCook = async id => {\n  const snapshot = await db.collection(\"Cooks\").doc(`${id}`).get();\n  console.log(snapshot.data());\n  const data = await snapshot.data();\n\n  if (data) {\n    // data will never be undefined here, because we just checked that.\n    const foo = data.foo;\n  }\n\n  if (data !== undefined) return data;\n};\n\nconst getMenu = async phone => {\n  const orders = await getOrders(null, phone); // console.log(orders)\n  // const orders = await Orders.filter(order=>order.verified)    \n  //  console.log(orders);\n  // console.log (orders)\n\n  const IDs = await orders.map(order => order.cookID); //console.log (IDs)\n\n  const menuData = await IDs.map(async id => await GetMenu(id));\n  const res = await Promise.all(menuData);\n  console.log(res);\n  return res;\n};\n\nconst GetMenu = async id => {\n  //console.log (id);\n  const Cook = await db.collection(\"Cooks\").doc(`${id}`).get();\n  const cook = await Cook.data();\n  const Menu = await db.collection(\"Cooks\").doc(`${id}`).collection('Menu').get();\n  const menu = Menu.docs.map(doc => doc.data()); //    console.log (menu)\n\n  const obj = {\n    Cook: cook,\n    Menu: menu\n  };\n  console.log(obj);\n  return obj;\n};\n\n_c = GetMenu;\n\nconst getCookByState = async state => {\n  const snapshot = await db.collection(\"Cooks\").get();\n  const data = await snapshot.docs.map(doc => {\n    return { ...doc.data(),\n      id: doc.id\n    };\n  });\n  const cooks = data.filter(cook => cook.State === state);\n  if (cooks.length === 0 || cooks === undefined || cooks === null) return null;\n  console.table(cooks);\n  return cooks;\n};\n\nexport { isUserExists, getUser, getOrders, addUser, addOrder, getCooks, getMenu, getCook, getCookByState, GetMenu };\n\nvar _c;\n\n$RefreshReg$(_c, \"GetMenu\");","map":{"version":3,"sources":["/home/suhan/Foodey/foodey-testing/src/firebase/db.js"],"names":["db","firebase","isUserExists","phoneNo","doc","collection","toString","get","exists","getUser","console","table","data","getOrders","setOrders","snapshot","docs","map","addUser","set","then","res","log","addOrder","order","today","Date","date","getDate","getMonth","getFullYear","id","cookID","cook","getCook","newData","add","docRef","catch","error","getCooks","foo","undefined","getMenu","phone","orders","IDs","menuData","GetMenu","Promise","all","Cook","Menu","menu","obj","getCookByState","state","cooks","filter","State","length"],"mappings":"AAAA,SAAQA,EAAR,EAAYC,QAAZ,QAA2B,kBAA3B;;AAGA,MAAMC,YAAY,GAAI,MAAOC,OAAP,IAAiB;AACrC,QAAMC,GAAG,GAAG,MAAOJ,EAAE,CAACK,UAAH,CAAe,WAAf,EAA4BD,GAA5B,CAAgCD,OAAO,CAACG,QAAR,EAAhC,EAAoDC,GAApD,EAAnB;AACA,SAAOH,GAAG,CAACI,MAAX;AACD,CAHD;;AAKA,MAAMC,OAAO,GAAG,MAAON,OAAP,IAAiB;AAC7B,QAAMC,GAAG,GAAG,MAAMJ,EAAE,CAACK,UAAH,CAAe,WAAf,EAA4BD,GAA5B,CAAgCD,OAAO,CAACG,QAAR,EAAhC,EAAoDC,GAApD,EAAlB;AACAG,EAAAA,OAAO,CAACC,KAAR,CAAeP,GAAG,CAACQ,IAAJ,EAAf;AACA,SAAOR,GAAG,CAACQ,IAAJ,EAAP;AACH,CAJD;;AAMA,MAAMC,SAAS,GAAG,OAAOC,SAAP,EAAkBX,OAAlB,KAA4B;AAC1C,QAAMY,QAAQ,GAAG,MAAMf,EAAE,CAACK,UAAH,CAAe,WAAf,EAA4BD,GAA5B,CAAgCD,OAAhC,EAAyCE,UAAzC,CAAqD,QAArD,EAA+DE,GAA/D,EAAvB,CAD0C,CAE3C;;AACC,SAAOQ,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkBb,GAAG,IAAEA,GAAG,CAACQ,IAAJ,EAAvB,CAAP;AACH,CAJD;;AAOA,MAAMM,OAAO,GAAIN,IAAD,IAAQ;AACpBZ,EAAAA,EAAE,CAACK,UAAH,CAAc,WAAd,EAA2BD,GAA3B,CAA+BQ,IAAI,CAACT,OAAL,CAAaG,QAAb,EAA/B,EAAyDa,GAAzD,CAA6DP,IAA7D,EAAmEQ,IAAnE,CAAwEC,GAAG,IAAEX,OAAO,CAACY,GAAR,CAAY,OAAZ,CAA7E;AACH,CAFD;;AAIA,MAAMC,QAAQ,GAAG,OAAOpB,OAAP,EAAgBqB,KAAhB,KAAwB;AACrC,QAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,QAAMC,IAAI,GAAI,GAAEF,KAAK,CAACG,OAAN,EAAiB,IAAGH,KAAK,CAACI,QAAN,EAAkB,IAAGJ,KAAK,CAACK,WAAN,EAAqB,EAA9E;AACA,QAAMC,EAAE,GAAGP,KAAK,CAACQ,MAAjB;AACA,QAAMC,IAAI,GAAG,MAAMC,OAAO,CAAEH,EAAF,CAA1B,CAJqC,CAKxC;;AACG,QAAMI,OAAO,GAAG,EACZ,GAAGX,KADS;AAEjB;AACKG,IAAAA,IAAI,EAAEA;AAHM,GAAhB;AAKA3B,EAAAA,EAAE,CAACK,UAAH,CAAe,WAAf,EAA4BD,GAA5B,CAAgCD,OAAhC,EAAyCE,UAAzC,CAAqD,QAArD,EAA+D+B,GAA/D,CAAmED,OAAnE,EAA4Ef,IAA5E,CAAkFiB,MAAD,IAAY;AACzF3B,IAAAA,OAAO,CAACY,GAAR,CAAY,4BAAZ,EAA0Ce,MAAM,CAACN,EAAjD;AACH,GAFD,EAGCO,KAHD,CAGQC,KAAD,IAAW;AACd7B,IAAAA,OAAO,CAAC6B,KAAR,CAAc,yBAAd,EAAyCA,KAAzC;AACH,GALD;AAMH,CAjBD;;AAoBA,MAAMC,QAAQ,GAAG,YAAU;AACvB,QAAMzB,QAAQ,GAAG,MAAMf,EAAE,CAACK,UAAH,CAAe,OAAf,EAAwBE,GAAxB,EAAvB;AACA,QAAMK,IAAI,GAAG,MAAMG,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkBb,GAAG,IAAE;AAC1C,WAAO,EAAE,GAAGA,GAAG,CAACQ,IAAJ,EAAL;AACKmB,MAAAA,EAAE,EAAE3B,GAAG,CAAC2B;AADb,KAAP;AAGC,GAJkB,CAAnB;AAKArB,EAAAA,OAAO,CAACY,GAAR,CAAYV,IAAZ;AACA,SAAOA,IAAP;AACH,CATD;;AAWA,MAAMsB,OAAO,GAAG,MAAOH,EAAP,IAAY;AACxB,QAAMhB,QAAQ,GAAG,MAAMf,EAAE,CAACK,UAAH,CAAe,OAAf,EAAwBD,GAAxB,CAA6B,GAAE2B,EAAG,EAAlC,EAAqCxB,GAArC,EAAvB;AACAG,EAAAA,OAAO,CAACY,GAAR,CAAaP,QAAQ,CAACH,IAAT,EAAb;AACA,QAAMA,IAAI,GAAG,MAAMG,QAAQ,CAACH,IAAT,EAAnB;;AACA,MAAIA,IAAJ,EAAU;AACN;AACA,UAAM6B,GAAG,GAAG7B,IAAI,CAAC6B,GAAjB;AACH;;AACD,MAAI7B,IAAI,KAAG8B,SAAX,EACI,OAAO9B,IAAP;AACP,CAVD;;AAYA,MAAM+B,OAAO,GAAG,MAAOC,KAAP,IAAe;AAC3B,QAAMC,MAAM,GAAG,MAAMhC,SAAS,CAAE,IAAF,EAAQ+B,KAAR,CAA9B,CAD2B,CAE5B;AACA;AACD;AAEC;;AACC,QAAME,GAAG,GAAG,MAAMD,MAAM,CAAC5B,GAAP,CAAYO,KAAK,IAAEA,KAAK,CAACQ,MAAzB,CAAlB,CAP2B,CAQ5B;;AACC,QAAMe,QAAQ,GAAG,MAAMD,GAAG,CAAC7B,GAAJ,CAAS,MAAMc,EAAN,IAAU,MAAMiB,OAAO,CAACjB,EAAD,CAAhC,CAAvB;AACA,QAAMV,GAAG,GAAG,MAAM4B,OAAO,CAACC,GAAR,CAAYH,QAAZ,CAAlB;AACArC,EAAAA,OAAO,CAACY,GAAR,CAAaD,GAAb;AACA,SAAOA,GAAP;AACH,CAbD;;AAeA,MAAM2B,OAAO,GAAG,MAAOjB,EAAP,IAAY;AACpB;AACA,QAAMoB,IAAI,GAAG,MAAMnD,EAAE,CAACK,UAAH,CAAe,OAAf,EAAwBD,GAAxB,CAA6B,GAAE2B,EAAG,EAAlC,EAAqCxB,GAArC,EAAnB;AACA,QAAM0B,IAAI,GAAG,MAAMkB,IAAI,CAACvC,IAAL,EAAnB;AACA,QAAMwC,IAAI,GAAG,MAAMpD,EAAE,CAACK,UAAH,CAAe,OAAf,EAAwBD,GAAxB,CAA8B,GAAE2B,EAAG,EAAnC,EAAsC1B,UAAtC,CAAiD,MAAjD,EAAyDE,GAAzD,EAAnB;AACA,QAAM8C,IAAI,GAAGD,IAAI,CAACpC,IAAL,CAAUC,GAAV,CAAcb,GAAG,IAAEA,GAAG,CAACQ,IAAJ,EAAnB,CAAb,CALoB,CAMxB;;AACI,QAAM0C,GAAG,GAAG;AACRH,IAAAA,IAAI,EAAElB,IADE;AAERmB,IAAAA,IAAI,EAAEC;AAFE,GAAZ;AAIA3C,EAAAA,OAAO,CAACY,GAAR,CAAagC,GAAb;AACA,SAAOA,GAAP;AACH,CAbL;;KAAMN,O;;AAgBN,MAAMO,cAAc,GAAG,MAAOC,KAAP,IAAe;AAClC,QAAMzC,QAAQ,GAAG,MAAMf,EAAE,CAACK,UAAH,CAAe,OAAf,EAAwBE,GAAxB,EAAvB;AACA,QAAMK,IAAI,GAAG,MAAMG,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkBb,GAAG,IAAE;AACtC,WAAO,EAAE,GAAGA,GAAG,CAACQ,IAAJ,EAAL;AACKmB,MAAAA,EAAE,EAAE3B,GAAG,CAAC2B;AADb,KAAP;AAGC,GAJc,CAAnB;AAMA,QAAM0B,KAAK,GAAG7C,IAAI,CAAC8C,MAAL,CAAYzB,IAAI,IAAEA,IAAI,CAAC0B,KAAL,KAAaH,KAA/B,CAAd;AACA,MAAIC,KAAK,CAACG,MAAN,KAAe,CAAf,IAAkBH,KAAK,KAAGf,SAA1B,IAAqCe,KAAK,KAAG,IAAjD,EACI,OAAO,IAAP;AACJ/C,EAAAA,OAAO,CAACC,KAAR,CAAc8C,KAAd;AACA,SAAOA,KAAP;AAEH,CAdD;;AAiBA,SAAQvD,YAAR,EAAsBO,OAAtB,EAA+BI,SAA/B,EAA0CK,OAA1C,EAAmDK,QAAnD,EAA6DiB,QAA7D,EAAuEG,OAAvE,EAAgFT,OAAhF,EAAyFqB,cAAzF,EAAyGP,OAAzG","sourcesContent":["import {db, firebase} from './firebaseConfig';\n\n\nconst isUserExists =  async (phoneNo)=>{\n  const doc = await  db.collection (\"customers\").doc(phoneNo.toString()).get()\n  return doc.exists;\n}\n\nconst getUser = async (phoneNo)=>{\n    const doc = await db.collection (\"customers\").doc(phoneNo.toString()).get ();\n    console.table (doc.data());\n    return doc.data ();\n}\n\nconst getOrders = async (setOrders, phoneNo)=>{\n    const snapshot = await db.collection (\"customers\").doc(phoneNo).collection (\"orders\").get()\n   // console.table (snapshot.docs.map(doc=>doc.data()))\n    return snapshot.docs.map(doc=>doc.data());\n}\n\n\nconst addUser = (data)=>{\n    db.collection(\"customers\").doc(data.phoneNo.toString ()).set(data).then(res=>console.log(\"Added\"))\n}\n\nconst addOrder = async (phoneNo, order)=>{\n    const today = new Date ();\n    const date = `${today.getDate ()}-${today.getMonth ()}-${today.getFullYear ()}`;\n    const id = order.cookID;\n    const cook = await getCook (id);\n //   console.log(cook.Name)\n    const newData = { \n        ...order,\n   //     Name: cook.Name,\n        date: date\n    }\n    db.collection (\"customers\").doc(phoneNo).collection (\"orders\").add(newData).then((docRef) => {\n        console.log(\"Document written with ID: \", docRef.id);\n    })\n    .catch((error) => {\n        console.error(\"Error adding document: \", error);\n    });\n}\n\n\nconst getCooks = async ()=>{\n    const snapshot = await db.collection (\"Cooks\").get ();\n    const data = await snapshot.docs.map(doc=>{\n    return { ...doc.data(),\n                id: doc.id\n        }\n    });\n    console.log(data)\n    return data;\n}\n\nconst getCook = async (id)=>{\n    const snapshot = await db.collection (\"Cooks\").doc(`${id}`).get();\n    console.log (snapshot.data())\n    const data = await snapshot.data();\n    if (data) {\n        // data will never be undefined here, because we just checked that.\n        const foo = data.foo\n    }\n    if (data!==undefined)\n        return data;\n}\n\nconst getMenu = async (phone)=>{\n    const orders = await getOrders (null, phone)\n   // console.log(orders)\n   // const orders = await Orders.filter(order=>order.verified)    \n  //  console.log(orders);\n\n   // console.log (orders)\n    const IDs = await orders.map (order=>order.cookID);\n   //console.log (IDs)\n    const menuData = await IDs.map (async id=>await GetMenu(id));\n    const res = await Promise.all(menuData);\n    console.log (res);\n    return res;\n}\n\nconst GetMenu = async (id)=>{\n        //console.log (id);\n        const Cook = await db.collection (\"Cooks\").doc(`${id}`).get ();\n        const cook = await Cook.data ();\n        const Menu = await db.collection (\"Cooks\").doc (`${id}`).collection('Menu').get ();\n        const menu = Menu.docs.map(doc=>doc.data ());\n    //    console.log (menu)\n        const obj = {\n            Cook: cook,\n            Menu: menu\n        };\n        console.log (obj);\n        return obj\n    }\n\n\nconst getCookByState = async (state)=>{\n    const snapshot = await db.collection (\"Cooks\").get ();\n    const data = await snapshot.docs.map(doc=>{\n        return { ...doc.data(),\n                    id: doc.id\n            }\n        });\n\n    const cooks = data.filter(cook=>cook.State===state);\n    if (cooks.length===0||cooks===undefined||cooks===null)\n        return null;\n    console.table(cooks)\n    return cooks;\n\n}\n\n\nexport {isUserExists, getUser, getOrders, addUser, addOrder, getCooks, getMenu, getCook, getCookByState, GetMenu}"]},"metadata":{},"sourceType":"module"}